#!/usr/bin/env python3

# log-weather - get current weather data and update the database


from datetime import datetime
import sys
from time import sleep

import psycopg

from btleWeatherStation import WeatherStation


# details of the database to update
DBNAME = "weather"
DBHOST = "localhost"
DBUSER = "weather_update"
DBPASSWORD = "update"

# MAC address of the weather station to connect to
STATION_MAC = "e0:db:ba:ac:0e:93"

# record history on multiples of these minutes past the hour (so probably
# should be something that divides into 60 exactly)
HISTORY_MINS = 15

# get the date and time now in the current timezone
now = datetime.now()

# connect to our weather station and get the current data, with some retries
w = WeatherStation(STATION_MAC)
w.measure_retry()

# connect to the database and get a cursor
conn = psycopg.connect(f"postgresql://{DBUSER}:{DBPASSWORD}@{DBHOST}/{DBNAME}")
cur = conn.cursor()

# work through the 4 sensors, including the internal one (0)
for s in range(0, 4):
    # get the data from this sensor
    temp = w.get_temp(s)["current"]
    humidity = w.get_humidity(s)["current"]

    # if no data from either sensor was available, skip this sensor
    if (temp is None) and (humidity is None):
        continue

    # store this temperature in the latest table
    #
    # we have to convert the temperature to a suitable type explcitly to
    # avoid an error matching functions in PostgreSQL
    cur.execute(
        "SELECT weather_latest_update(%s, %s, %s :: numeric(4, 1), %s)",
        (s, now, temp, humidity))

    # store the data in the history table if we're on a multiple of 15 minutes
    if (now.minute % HISTORY_MINS) == 0:
        cur.execute(
            "SELECT weather_history_insert(%s, %s, %s :: numeric(4, 1), %s)",
            (s, now, temp, humidity))

# commit the transaction and close the connection to the database
conn.commit()
conn.close()
